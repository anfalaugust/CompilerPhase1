%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int line_num = 1;   // Line number tracker
int col_num = 1;    // Column number tracker

void print_error(const char *message) {
    printf("Error at line %d, column %d: %s\n", line_num, col_num, message);
    exit(1);
}

%}

%%

[ \t\n]+                { col_num += yyleng; }
"--".*                  { /* Ignore comments */ }
program                { printf("PROGRAM\n"); }
beginprogram          { printf("BEGIN_PROGRAM\n"); }
endprogram            { printf("END_PROGRAM\n"); }
integer               { printf("INTEGER\n"); }
array                 { printf("ARRAY\n"); }
of                    { printf("OF\n"); }
if                    { printf("IF\n"); }
then                  { printf("THEN\n"); }
endif                 { printf("ENDIF\n"); }
else                  { printf("ELSE\n"); }
while                 { printf("WHILE\n"); }
loop                  { printf("LOOP\n"); }
endloop               { printf("ENDLOOP\n"); }
read                  { printf("READ\n"); }
write                 { printf("WRITE\n"); }
and                   { printf("AND\n"); }
or                    { printf("OR\n"); }
not                   { printf("NOT\n"); }
true                  { printf("TRUE\n"); }
false                 { printf("FALSE\n"); }
-                     { printf("SUB\n"); }
\+                    { printf("ADD\n"); }
\*                    { printf("MULT\n"); }
\/                    { printf("DIV\n"); }
=                     { printf("EQ\n"); }
<>                    { printf("NEQ\n"); }
<                     { printf("LT\n"); }
>                     { printf("GT\n"); }
<=                    { printf("LTE\n"); }
>=                    { printf("GTE\n"); }
;                     { printf("SEMICOLON\n"); }
:                     { printf("COLON\n"); }
,                     { printf("COMMA\n"); }
\(                    { printf("L_PAREN\n"); }
\)                    { printf("R_PAREN\n"); }
:=                    { printf("ASSIGN\n"); }

[a-zA-Z][a-zA-Z0-9_]*  { 
                            if (strlen(yytext) > 8) {
                                print_error("identifier exceeds 8 characters");
                            }
                            printf("IDENT %s\n", yytext);
                        }

[0-9]+                 { printf("NUMBER %s\n", yytext); }

.                      { 
                            print_error("unrecognized symbol"); 
                        }

%%

int main() {
    yylex();  // Start the lexical analyzer
    return 0;
}
