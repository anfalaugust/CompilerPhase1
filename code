%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int line_num = 1;
int col_num = 1;

void print_error(const char *message) {
    printf("Error at line %d, column %d: %s\n", line_num, col_num, message);
    exit(1);
}
%}

%%

"--".*                  { col_num += yyleng; }      
[ \t\r]+                { col_num += yyleng; }      
\n                      { line_num++; col_num = 1; } 

"program"               { printf("PROGRAM\n"); col_num += yyleng; }
"beginprogram"          { printf("BEGIN_PROGRAM\n"); col_num += yyleng; }
"endprogram"            { printf("END_PROGRAM\n"); col_num += yyleng; }
"integer"               { printf("INTEGER\n"); col_num += yyleng; }
"array"                 { printf("ARRAY\n"); col_num += yyleng; }
"of"                    { printf("OF\n"); col_num += yyleng; }
"if"                    { printf("IF\n"); col_num += yyleng; }
"then"                  { printf("THEN\n"); col_num += yyleng; }
"endif"                 { printf("ENDIF\n"); col_num += yyleng; }
"else"                  { printf("ELSE\n"); col_num += yyleng; }
"while"                 { printf("WHILE\n"); col_num += yyleng; }
"loop"                  { printf("LOOP\n"); col_num += yyleng; }
"endloop"               { printf("ENDLOOP\n"); col_num += yyleng; }
"read"                  { printf("READ\n"); col_num += yyleng; }
"write"                 { printf("WRITE\n"); col_num += yyleng; }
"and"                   { printf("AND\n"); col_num += yyleng; }
"or"                    { printf("OR\n"); col_num += yyleng; }
"not"                   { printf("NOT\n"); col_num += yyleng; }
"true"                  { printf("TRUE\n"); col_num += yyleng; }
"false"                 { printf("FALSE\n"); col_num += yyleng; }

";"                     { printf("SEMICOLON\n"); col_num += yyleng; }
":"                     { printf("COLON\n"); col_num += yyleng; }
","                     { printf("COMMA\n"); col_num += yyleng; }
"\("                    { printf("L_PAREN\n"); col_num += yyleng; }
"\)"                    { printf("R_PAREN\n"); col_num += yyleng; }
":="                    { printf("ASSIGN\n"); col_num += yyleng; }
"\+"                    { printf("ADD\n"); col_num += yyleng; }
"-"                     { printf("SUB\n"); col_num += yyleng; }
"\*"                    { printf("MULT\n"); col_num += yyleng; }
"\/"                    { printf("DIV\n"); col_num += yyleng; }
"="                     { printf("EQ\n");  col_num += yyleng; }
"<>"                    { printf("NEQ\n"); col_num += yyleng; }
"<="                    { printf("LTE\n"); col_num += yyleng; }
">="                    { printf("GTE\n"); col_num += yyleng; }
"<"                     { printf("LT\n");  col_num += yyleng; }
">"                     { printf("GT\n");  col_num += yyleng; }

[0-9]+                  { printf("NUMBER %s\n", yytext); col_num += yyleng; }

[a-zA-Z][a-zA-Z0-9_]*   {
                           int len = strlen(yytext);
                           if (len > 8) {
                               print_error("identifier exceeds 8 characters");
                           }
                           if (yytext[len-1] == '_') {
                               print_error("identifier cannot end with underscore");
                           }
                           printf("IDENT %s\n", yytext);
                           col_num += yyleng;
                        }

.                       { 
                           char msg[100];
                           sprintf(msg, "unrecognized symbol \"%s\"", yytext);
                           print_error(msg); 
                        }

%%

int main() {
    yylex();
    return 0;
}
int yywrap(void) {
    return 1;
}

    yylex();  // Start the lexical analyzer
    return 0;
}
